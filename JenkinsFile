
pipeline {
  agent any
  parameters
  {
       string defaultValue: 'stage', name: 'Environment'
   }
  stages {
    stage('Full Flow 1') {
      parallel {
        stage('Core') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE')
				{
                    echo 'Core'
                }
          }
        }

        stage('comprehensive') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE')
			    {
                    echo 'comprehensive'
                }
          }
        }

      }
    }
    stage('Full Flow 2') {
      parallel {
        stage('micro_comprehensive') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE')
			    {
                    echo 'micro_comprehensive'
                }
          }
        }

        stage('corporate_governance') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE')
			    {
                    echo 'corporate_governance'
                }
          }
        }

      }
    }
    stage('Full Flow 3') {
      parallel {
        stage('LCTR') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE')
			    script{
			    {
                  if ("${params.Environment}".toLowerCase().contains('test') || "${params.Environment}".toLowerCase().contains('stage'))
                        {
                            echo 'LCTR'
                        }

               }
           }
        }

        stage('micro_core') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE')
			    {
                    echo 'micro_core'
                }
          }
        }

      }
    }
	stage('Download 1') {
      parallel {
        stage('subindustry_default') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE')
			    {
                    echo 'subindustry_default'
                }
               }
        }
		stage('company_product_univers') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE')
			    {
                    echo 'company_product_univers'
                }
          }
        }
		stage('activation_matrix') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE')
			    {
                    echo 'activation_matrix'
                }
          }
        }
		stage('company_type') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE')
			    {
                    echo 'company_type'
                }
          }
        }

      }
    }
	stage('Download 2') {
      parallel {
        stage('cutoff_values') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE')
			    {
                    echo 'cutoff_values'
                }
               }
        }
		stage('extra_indicator') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE')
			    {
                    echo 'extra_indicator'
                }
          }
        }
		stage('hidden_to_client') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE')
			    {
                    echo 'hidden_to_client'
                }
          }
        }
		stage('Projections') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE')
			    {
                    echo 'Projections'
                }
          }
        }

      }
    }
	stage('Download 3') {
      parallel {
        stage('qualitative_overlay') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE')
			    {
                    echo 'qualitative_overlay'
                }
               }
        }
		stage('weight_matrix_tests') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE')
			    {
                    echo 'weight_matrix_tests'
                }
          }
        }
	  }
    }

   }
    post {
        always
            {
              echo "Publish allure report"
              allure includeProperties: false, jdk: '', results: [[path: 'allure-result']]
              bat 'allure-combine allure-report'
            }

	}
}